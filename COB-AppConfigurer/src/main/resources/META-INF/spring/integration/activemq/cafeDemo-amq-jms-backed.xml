<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
	xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
	xmlns:amq="http://activemq.apache.org/schema/core"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
		http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
		http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.4.2.xsd">

	
		<bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="tcp://localhost:61616"/>
			</bean>
		</property>
		<property name="sessionCacheSize" value="10"/>
		<property name="cacheProducers" value="false"/>
	</bean>

	<!--Define an error channel that is backed by ActiveMQ. Note, by design, 
		the error channel that's created by default by SI if you don't declare one 
		specifically will use the pub/sub messaging domain. Because of that, i've 
		chosen to keep the same messaging domain when defining the error channel 
		explicitly. Note, you can leave out this declaration, but then your error 
		channel won't be backed by jms and can't participate in the same advantages 
		as those that are backed by JMS -->
	<int-jms:publish-subscribe-channel
		id="errorChannel" topic-name="org.springframework.integration.samples.cafe.errors" />

	<!-- <int:gateway id="cafe" service-interface="org.springframework.integration.samples.cafe.Cafe"/> -->
	<int:gateway id="applicationConfigurer"
		service-interface="com.cs.cob.appconfigurer.ApplicationConfigurer" />

	<!-- each order has a collection of order items that is split apart to be 
		processed -->
	<!-- <int-jms:channel id="orders" queue-name="org.springframework.integration.samples.cafe.orders" 
		/> -->
	<int-jms:channel id="applicationRequests" queue-name="applicationRequests" />

	<!-- <int:splitter input-channel="orders" expression="payload.items" output-channel="drinks"/> -->
	<int:splitter input-channel="applicationRequests"
		expression="payload.items" output-channel="application" />

	<!-- The router sends different drink orders on different paths -->
	<!-- <int-jms:channel id="drinks" queue-name="org.springframework.integration.samples.cafe.drinks"/> 
		<int:router input-channel="drinks" expression="payload.iced ? 'coldDrinks' 
		: 'hotDrinks'"/> -->
	<int-jms:channel id="application" queue-name="application" />
	<!-- <int:router input-channel="application" expression="payload.iced ? 
		'coldDrinks' : 'hotDrinks'"/> -->		

	<int:router input-channel="application"  expression="payload.appName" >
		<int:mapping value="PBS" channel="pbs" />
		<int:mapping value="EPS" channel="eps" />
	</int:router>
	<!-- individual order items are processed by the barista -->
	<!-- Note, these channels were defined as "pollable" in the original SI 
		config files. To achieve the same thing with a JMS-backed channel, set the 
		"message-driven" property to "false" -->
		
	<int-jms:channel id="pbs"
		queue-name="pbs"
		message-driven="false" >
		
		<int-jms:interceptors>
    	  <int:wire-tap channel="logger"/>
   		 </int-jms:interceptors>
   		 
		</int-jms:channel>
		
			<int:logging-channel-adapter log-full-message="true" id="logger" level="INFO"/>
		
	

	
	<int-jms:channel id="eps"
		queue-name="eps"
		message-driven="false" />
		
	

	<!-- drink order items are aggregated in a call to the waiter -->
	
	
		
	

	

	<bean id="setupHandler"
		class="com.cs.cob.appconfigurer.main.ApplicationSetupHandler" />

	<int:poller id="poller" default="true" fixed-delay="1000" />

	
</beans>
